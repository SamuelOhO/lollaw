-- report_target_type enum 생성
DO $$ BEGIN
    CREATE TYPE report_target_type AS ENUM ('post', 'comment');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- 기존 데이터를 임시 테이블로 복사
CREATE TABLE posts_temp AS SELECT * FROM posts;
CREATE TABLE likes_temp AS SELECT * FROM likes;

-- 기존 테이블 삭제 (의존성 순서대로)
DROP TABLE IF EXISTS reports;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS profiles;

-- profiles 테이블 생성
CREATE TABLE profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    display_name text,
    avatar_url text,
    created_at timestamp with time zone NOT NULL DEFAULT timezone('Asia/Seoul'::text, now()),
    updated_at timestamp with time zone NOT NULL DEFAULT timezone('Asia/Seoul'::text, now()),
    nickname_last_updated timestamp with time zone,
    school_verified boolean DEFAULT false,
    school_email character varying,
    school_document_url character varying,
    school_generation integer,
    lawyer_verified boolean DEFAULT false,
    user_type character varying DEFAULT 'general'::character varying,
    is_anonymous boolean DEFAULT false
);

-- profiles 테이블의 user_type check constraint 추가
ALTER TABLE profiles ADD CONSTRAINT profiles_user_type_check 
CHECK (user_type::text = ANY (ARRAY['lawyer'::character varying::text, 'law_student'::character varying::text, 'general'::character varying::text]));

-- posts 테이블 재생성
CREATE TABLE posts (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title text NOT NULL,
    content text NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    category_id integer NOT NULL,
    created_at timestamp with time zone DEFAULT (now() AT TIME ZONE 'Asia/Seoul'::text),
    updated_at timestamp with time zone DEFAULT (now() AT TIME ZONE 'Asia/Seoul'::text),
    views integer DEFAULT 0,
    report_count integer DEFAULT 0,
    is_hidden boolean DEFAULT false
);

-- posts 테이블에 추가 FK 제약조건 (profiles 참조)
ALTER TABLE posts ADD CONSTRAINT posts_user_id_fkey1 
FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE;

-- 기존 posts 데이터 복원
INSERT INTO posts (id, title, content, user_id, created_at, updated_at, views, report_count, is_hidden)
SELECT 
    id::text::integer,
    title,
    content,
    user_id,
    created_at,
    created_at,
    0,
    0,
    false
FROM posts_temp;

-- comments 테이블 생성 (user_id를 auth.users 참조로 변경)
CREATE TABLE comments (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    content text NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    post_id integer REFERENCES posts(id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT (now() AT TIME ZONE 'Asia/Seoul'::text),
    updated_at timestamp with time zone DEFAULT (now() AT TIME ZONE 'Asia/Seoul'::text),
    parent_id integer REFERENCES comments(id),
    report_count integer DEFAULT 0,
    is_hidden boolean DEFAULT false
);

-- likes 테이블 재생성
CREATE TABLE likes (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    post_id integer REFERENCES posts(id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT now()
);

-- 기존 likes 데이터 복원
INSERT INTO likes (user_id, post_id, created_at)
SELECT user_id, post_id::text::integer, created_at
FROM likes_temp
WHERE post_id IS NOT NULL;

-- likes_comments 테이블 생성 (실제 DB에 존재)
CREATE TABLE likes_comments (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    comment_id integer NOT NULL REFERENCES comments(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT now()
);

-- reports 테이블 재생성 (target_id를 uuid로 변경)
CREATE TABLE reports (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    target_type report_target_type NOT NULL,
    target_id uuid NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    reason text NOT NULL,
    status text DEFAULT 'pending'::text,
    admin_note text,
    created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now())
);

-- reports 테이블의 status check constraint 추가
ALTER TABLE reports ADD CONSTRAINT reports_status_check
CHECK (status = ANY (ARRAY['pending'::text, 'reviewed'::text, 'resolved'::text, 'rejected'::text]));

-- 임시 테이블 삭제
DROP TABLE posts_temp;
DROP TABLE likes_temp;

-- 제약 조건 추가
ALTER TABLE likes ADD CONSTRAINT likes_user_id_post_id_key UNIQUE (user_id, post_id);
ALTER TABLE reports ADD CONSTRAINT unique_user_target_report UNIQUE (user_id, target_type, target_id);

-- RLS 정책 재설정
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE likes ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE reports ENABLE ROW LEVEL SECURITY;

-- profiles 테이블의 RLS 정책 설정
CREATE POLICY "자신의 프로필만 수정 가능"
ON profiles FOR UPDATE
TO public
USING ((auth.uid() = id));

CREATE POLICY "프로필 조회 허용"
ON profiles FOR SELECT
TO public
USING (true);

-- comments 테이블의 RLS 정책 설정
CREATE POLICY "인증된 사용자의 댓글 작성 허용"
ON comments FOR INSERT
TO public
WITH CHECK ((auth.role() = 'authenticated'::text) AND (auth.uid() = user_id));

CREATE POLICY "인증된 사용자의 학교게시판 댓글 조회 허용"
ON comments FOR SELECT
TO public
USING (((auth.role() = 'authenticated'::text) AND (EXISTS ( SELECT 1
   FROM posts
  WHERE (posts.id = comments.post_id)))));

CREATE POLICY "자유게시판 댓글 조회 허용"
ON comments FOR SELECT
TO public
USING ((EXISTS ( SELECT 1
   FROM posts
  WHERE (posts.id = comments.post_id))));

CREATE POLICY "작성자의 댓글 삭제 허용"
ON comments FOR DELETE
TO public
USING ((auth.uid() = user_id));

CREATE POLICY "작성자의 댓글 수정 허용"
ON comments FOR UPDATE
TO public
USING ((auth.uid() = user_id)); 